import os
import astimp
import jwt
from flask import Flask, flash, request, redirect, send_file, Blueprint, current_app, jsonify
from app import app
from werkzeug.utils import secure_filename
from AppLogic import AST as AST
from AppLogic.token import verify_token
from AppLogic.validate_token import check_token_validity
from database import mysql

crop_blueprint = Blueprint("crop", __name__)


"""
    This route indicates an API endpoint, it recieves an image through post request. 
    The image is analyzed, its ROIs are extracted, cropped and saved to crop directory.
    TODO: verify data types in db
"""


@crop_blueprint.route('/process/crops', methods=['POST'])
def analyze_image_crops():
    if 'access_token' not in request.cookies:
        #reject 
        return jsonify({"status":"failure", "message":"invalid request, no token"})  
    token = request.cookies['access_token']
    user_id = check_token_validity(token)['id']
    # NOTE on Ghadeer's edit:  I've added a line that checks if test_id exists before running tests
    test_id = request.form['test_id']
    test_id_query = "SELECT * from tests where id = %(test_id)s;"
    cursor = mysql.connection.cursor()
    cursor.execute(test_id_query, {"test_id": test_id})
    result = cursor.fetchone()
    if result is None:
        return jsonify({"error":"no test with this id is found"})
    else:
    # prepare return data
    # filename will be fetched according to the "test_id"
        fetch_img_query = "SELECT img FROM tests where id=%(test_id)s"
        cursor.execute(fetch_img_query, {'test_id': test_id})
        # to fetch the id as a string returned from the query
        parent_dir_filename = cursor.fetchone()[0]
        # then use the filename
        num_of_crops, data = AST.process_image_to_crops(parent_dir_filename)
        # prepare sql statement
        query = """INSERT INTO cropped_antibiotics 
        (test_id, img_name, label, path, parent_directory, centerX, centerY, width, height, inhibition_radius) 
         VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        atb_ids = []
        # inside a (try catch) to ensure (result) is always executed right
        try:
            # loop through each antibiotic to insert it to db
            for atb in data:
                values = (test_id, atb["img_name"], atb["label"], atb["img_folder"], parent_dir_filename,
                            atb["centerX"], atb["centerY"], atb["width"], atb["height"], atb["inhibition_radius"])
                cursor.execute(query, values)
                atb_ids.append(cursor.lastrowid)
        except Exception as e:
            mysql.connection.rollback()
            return jsonify({'error': str(e)})
        # if the length of the inserted and prepare atb ids equals the length of the data that was generated by process to crops function 
        # that's success 
        # to ensure data intergrity, we'll commit if all antibiotics identified in an image are correctly prepared and inserted 
        if len(atb_ids) == len(data):
            # success -> return atb ids
            mysql.connection.commit()
            cursor.close()
            return jsonify({"num of crops": len(atb_ids)}, atb_ids)


"""
     This route indicates an API endpoint, which recieves a request containing an image name and its path,
      then returns the image with this specific information,
"""


@crop_blueprint.route('/fetch/crop', methods=['POST'])
def get_crop():
    # user_id = check_token_validity(request.cookies["access_token"])['id']
    payload = check_token_validity(request.cookies["access_token"])
    # get user id for later usage
    # user_id = payload["id"]
    # if image id is not in the request -> don't procceed.
    if 'img_id' not in request.form:
        return "No id is provided!"
    # fetch image id from the request
    img_id = request.form['img_id']
    # if the image id is empty -> don't procceed.
    if img_id == '':
        # img_id is dummy -> not acceptable
        return "Blank ids are not acceptable!"
    # but if it the id is a valid int proceed
    if img_id:
        # create a cursor object
        cursor = mysql.connection.cursor()
        # get all the image's data
        query = "SELECT * FROM cropped_antibiotics WHERE id=%(img_id)s"
        # execute the query and pass the named placeholder
        cursor.execute(query, {'img_id': img_id})
        # fetch the result
        resultAll = cursor.fetchone()
        # check if the query returned a result(ie. it's not None, which means it's true)
        if resultAll:
            # intREsult = len(resultAll)
            # check the length of the result(if it only returned one item)
            if len(resultAll) > 0:
                # get the image path and name to send it to the user
                img_path = resultAll[4]
                img_name = resultAll[2]
                # create an object to store all the image's details
                atb = {}
                # get image's data from the result
                atb['img_id'] = resultAll[0]
                atb['test_id'] = resultAll[1]
                atb['label'] = resultAll[3]
                atb['inhibition_radius'] = resultAll[10]
                atb['centerX'] = resultAll[6]
                atb['centerY'] = resultAll[7]
                atb['width'] = resultAll[8]
                atb['height'] = resultAll[9]
                # join the image name and path to correctly locate the image in the file system and display it 
                img = os.path.join(img_path, img_name)                
                # send the image along with the response and display it
                response = send_file(img)
                # add the atb object to the response headers as a custom (atb-data) header
                response.headers['atb-data'] = atb
                return response
            else:
                # never occuring scenario but i guess an error that should be caught
                return jsonify({"Status": "Error", "Message": "The image id you provided is a duplicate value that matches more than 1 image id"})
        else:
            return jsonify({"Status": "Error", "Message": "The image id you provided doesn't match any stored image id"})


@crop_blueprint.route('/')
def mock_route():
    return "Hello World?"
